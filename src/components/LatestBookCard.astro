---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import Case from "case";
import { format } from "date-fns";
import BookRating from "./BookRating.astro";
import TagsList from "./TagsList.astro";

type Props = {
  book: CollectionEntry<"books">;
};

const {
  book: {
    data: { ISBN, tags, title, dateAdded: date, myRating, author },
    slug,
  },
} = Astro.props;

const url = encodeURI(
  `https://openlibrary.org/api/books?bibkeys=ISBN:${ISBN}&callback=mycallback`
);

const res = await fetch(url);

if (!res.ok) {
  throw new Error("Failed to fetch book metadata");
}

const bookMetaText = await res.text();
const bookMeta = JSON.parse(
  bookMetaText.replace("mycallback(", "").slice(0, -2).replace(" ", "").trim()
);

const previewUrl = bookMeta[`ISBN:${ISBN}`]?.preview_url ?? "";
const thumbnailUrl =
  bookMeta[`ISBN:${ISBN}`]?.thumbnail_url?.replace("-S", "-L") ?? "";
---

<div class="card mb-8 items-center">
  <div class="content p-10">
    <a href={`/books/${slug}/`} class="h-fit">
      <h1 transition:name={`title-${slug}`} class="text-xl mb-2 text-center">
        {title}
      </h1>
    </a>

    <p class="">Author: {Case.upper(author)}</p>

    <BookRating rating={myRating} />

    <TagsList tags={tags} />

    <p
      transition:name={`date-${slug}`}
      class="text-sm text-[hsl(var(--muted-foreground))]"
    >
      {format(new Date(date), "MMMM dd, yyyy")}
    </p>
  </div>

  {
    thumbnailUrl && (
      <div class="image h-full overflow-hidden">
        <Image
          transition:name={`image-${slug}`}
          class="object-cover h-full"
          src={thumbnailUrl}
          width="180"
          height="265.48"
          alt={`Cover of ${title}`}
        />
      </div>
    )
  }
</div>

<style>
  .card {
    display: grid;
    grid-template: "content image" / 3fr 1fr;
    color: hsl(var(--card-foreground));
    background-color: hsl(var(--muted));
  }

  .card:has(.image) {
    grid-template:
      "image" 1fr
      "content" 4fr;
  }
  .card:has(.image) {
    grid-template: "image content" / 1fr 1fr;
  }
  .card:not(:has(.image)) {
    grid-template: "content" / 1fr;
  }
  .content {
    grid-area: content;
    display: grid;
    grid-template:
      "title" auto-fit
      "description" 1fr
      "date" auto-fit
      "tags" auto-fit;
    place-items: center;
  }
  @media screen and (min-width: 768px) {
    .card:has(.image) {
      grid-template: "image content" / 1fr 1fr;
    }
  }
  .image {
    grid-area: image;
  }
  a {
    color: hsl(var(--card-foreground));
  }
  a:hover {
    background-color: transparent;
  }
</style>
